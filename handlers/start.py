import asyncio

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.dispatcher.filters.state import State, StatesGroup

from loader import dp
from database import getters, setters


class StartStates(StatesGroup):
    waiting_for_name = State()


@dp.message_handler(CommandStart())
async def start(message: types.Message):
    '''–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'''
    msg_text = (
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n'
        '–ù–∞ —Å–≤—è–∑–∏ –í–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í–∞—à–µ–º—É –≤–Ω–∏–º–∞–Ω–∏—é –±—É–¥–µ—Ç '
        '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ —Ç–µ–º–∞ –¥–ª—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏: ¬´–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è¬ª. –í –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è –í–∞–º –±—É–¥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã '
        '—Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.\n\n'
        '–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∫–æ—Ä–æ—Ç–∫–∏–º –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–æ–º '
        '–æ —Ç–æ–º, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º. –≠—Ç–æ –Ω–µ –∑–∞–π–º–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.'
    )
    await message.answer(msg_text)
    await asyncio.sleep(3)
    await message.answer_video(open('video.mp4', 'rb'))

    users_data = await getters.get_user_data(message.from_user.id)

    if not users_data:
        await asyncio.sleep(100)

        msg_text = (
            '–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?'
        )
        await message.answer(msg_text)
        await StartStates.waiting_for_name.set()


@dp.message_handler(state=StartStates.waiting_for_name)
async def add_new_user(message: types.Message, state: FSMContext):
    '''–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö'''
    await state.reset_state()
    name_user = message.text
    msg_text = (
        f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name_user}!\n\n'
        '–ù–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ 10 –±–ª–æ–∫–æ–≤.\n\n'
        '<i><b>–•–æ—á—É –µ—â–µ —Ä–∞–∑ –í–∞—Å –ø–æ–ø—Ä–æ—Å–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö '
        '–∫–Ω–æ–ø–∫–∏ –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º–Ω–µ —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. '
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!</b></i>\n\n'
        '–ì–æ—Ç–æ–≤—ã?üòä'
    )
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton('–ü–æ–µ—Ö–∞–ª–∏! üöÄ', callback_data='start_tasks')
    )
    await message.answer(msg_text, reply_markup=keyboard)

    user_data = (
        message.from_user.id,
        name_user,
    )
    await setters.add_new_user(user_data)